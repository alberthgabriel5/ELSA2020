//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ELSA2020
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class entityFramework : DbContext
    {
        public entityFramework()
            : base("name=entityFramework")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<caracteristica> caracteristica { get; set; }
        public virtual DbSet<caracteristicaHabitacion> caracteristicaHabitacion { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<ContenidoImagen> ContenidoImagen { get; set; }
        public virtual DbSet<ContenidoTexto> ContenidoTexto { get; set; }
        public virtual DbSet<Facilidades> Facilidades { get; set; }
        public virtual DbSet<habitacion> habitacion { get; set; }
        public virtual DbSet<hotel> hotel { get; set; }
        public virtual DbSet<Pagina> Pagina { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tipoHabitacion> tipoHabitacion { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Reservacion> Reservacion { get; set; }
        public virtual DbSet<temporada> temporada { get; set; }
        public virtual DbSet<Tabla> Tabla { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_obtenerCaractaeriticasHabitacion_Result> sp_obtenerCaractaeriticasHabitacion(Nullable<int> idTipoHabitacion)
        {
            var idTipoHabitacionParameter = idTipoHabitacion.HasValue ?
                new ObjectParameter("idTipoHabitacion", idTipoHabitacion) :
                new ObjectParameter("idTipoHabitacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerCaractaeriticasHabitacion_Result>("sp_obtenerCaractaeriticasHabitacion", idTipoHabitacionParameter);
        }
    
        public virtual ObjectResult<sp_obtenerHotel_Result> sp_obtenerHotel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerHotel_Result>("sp_obtenerHotel");
        }
    
        public virtual ObjectResult<sp_obtenerTemporada_Result> sp_obtenerTemporada()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerTemporada_Result>("sp_obtenerTemporada");
        }
    
        public virtual ObjectResult<sp_obtenerTiposDeHabitacion_Result> sp_obtenerTiposDeHabitacion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerTiposDeHabitacion_Result>("sp_obtenerTiposDeHabitacion");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_getDataAboutUsPage_Result> sp_getDataAboutUsPage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDataAboutUsPage_Result>("sp_getDataAboutUsPage");
        }
    
        public virtual ObjectResult<ContenidoTexto> GetDataAboutUsPage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoTexto>("GetDataAboutUsPage");
        }
    
        public virtual ObjectResult<ContenidoTexto> GetDataAboutUsPage(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoTexto>("GetDataAboutUsPage", mergeOption);
        }
    
        public virtual ObjectResult<ContenidoImagen> getImagesAboutUs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoImagen>("getImagesAboutUs");
        }
    
        public virtual ObjectResult<ContenidoImagen> getImagesAboutUs(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoImagen>("getImagesAboutUs", mergeOption);
        }
    
        public virtual ObjectResult<Facilidades> Sp_getFacilitiesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Facilidades>("Sp_getFacilitiesInfo");
        }
    
        public virtual ObjectResult<Facilidades> Sp_getFacilitiesInfo(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Facilidades>("Sp_getFacilitiesInfo", mergeOption);
        }
    
        public virtual ObjectResult<ContenidoTexto> sp_getDataFacilitiesPageContent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoTexto>("sp_getDataFacilitiesPageContent");
        }
    
        public virtual ObjectResult<ContenidoTexto> sp_getDataFacilitiesPageContent(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContenidoTexto>("sp_getDataFacilitiesPageContent", mergeOption);
        }
    
        public virtual ObjectResult<sp_buscarHabitacionDisponibleParaReserva_Result> sp_buscarHabitacionDisponibleParaReserva(string fechaInicio, string fechaFin, Nullable<int> tipoHabitacion)
        {
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("fechaFin", fechaFin) :
                new ObjectParameter("fechaFin", typeof(string));
    
            var tipoHabitacionParameter = tipoHabitacion.HasValue ?
                new ObjectParameter("tipoHabitacion", tipoHabitacion) :
                new ObjectParameter("tipoHabitacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_buscarHabitacionDisponibleParaReserva_Result>("sp_buscarHabitacionDisponibleParaReserva", fechaInicioParameter, fechaFinParameter, tipoHabitacionParameter);
        }
    
        public virtual ObjectResult<string> sp_comprobarNumeroReserva(string numeroReserva)
        {
            var numeroReservaParameter = numeroReserva != null ?
                new ObjectParameter("numeroReserva", numeroReserva) :
                new ObjectParameter("numeroReserva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_comprobarNumeroReserva", numeroReservaParameter);
        }
    
        public virtual ObjectResult<sp_obtenerTemporadaIntervalo_Result> sp_obtenerTemporadaIntervalo(string fechaInicio)
        {
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerTemporadaIntervalo_Result>("sp_obtenerTemporadaIntervalo", fechaInicioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_registrarCliente(string nombre, string apellidos, string correo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_registrarCliente", nombreParameter, apellidosParameter, correoParameter);
        }
    
        public virtual ObjectResult<string> sp_registrarReservacion(string numeroReservacion, Nullable<int> idCliente, Nullable<int> idHabitacion, string fechaEntrada, string fechaSalida, Nullable<int> cantidadDias, Nullable<int> cantidadNoches, Nullable<decimal> precio, string estado, Nullable<int> idTemporada)
        {
            var numeroReservacionParameter = numeroReservacion != null ?
                new ObjectParameter("numeroReservacion", numeroReservacion) :
                new ObjectParameter("numeroReservacion", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idHabitacionParameter = idHabitacion.HasValue ?
                new ObjectParameter("idHabitacion", idHabitacion) :
                new ObjectParameter("idHabitacion", typeof(int));
    
            var fechaEntradaParameter = fechaEntrada != null ?
                new ObjectParameter("fechaEntrada", fechaEntrada) :
                new ObjectParameter("fechaEntrada", typeof(string));
    
            var fechaSalidaParameter = fechaSalida != null ?
                new ObjectParameter("fechaSalida", fechaSalida) :
                new ObjectParameter("fechaSalida", typeof(string));
    
            var cantidadDiasParameter = cantidadDias.HasValue ?
                new ObjectParameter("cantidadDias", cantidadDias) :
                new ObjectParameter("cantidadDias", typeof(int));
    
            var cantidadNochesParameter = cantidadNoches.HasValue ?
                new ObjectParameter("cantidadNoches", cantidadNoches) :
                new ObjectParameter("cantidadNoches", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var idTemporadaParameter = idTemporada.HasValue ?
                new ObjectParameter("idTemporada", idTemporada) :
                new ObjectParameter("idTemporada", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_registrarReservacion", numeroReservacionParameter, idClienteParameter, idHabitacionParameter, fechaEntradaParameter, fechaSalidaParameter, cantidadDiasParameter, cantidadNochesParameter, precioParameter, estadoParameter, idTemporadaParameter);
        }
    
        public virtual ObjectResult<SP_FECHA_Result> SP_FECHA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FECHA_Result>("SP_FECHA");
        }
    
        public virtual int SP_ActualizaTextoSobreNosotros(Nullable<int> id, string texto)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var textoParameter = texto != null ?
                new ObjectParameter("texto", texto) :
                new ObjectParameter("texto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizaTextoSobreNosotros", idParameter, textoParameter);
        }
    
        public virtual int SP_ActualizaTextoFacilidades(Nullable<int> id, string texto)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var textoParameter = texto != null ?
                new ObjectParameter("texto", texto) :
                new ObjectParameter("texto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizaTextoFacilidades", idParameter, textoParameter);
        }
    
        public virtual ObjectResult<obtenerDescripcionFacilidad_Result1> obtenerDescripcionFacilidad(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<obtenerDescripcionFacilidad_Result1>("obtenerDescripcionFacilidad", idParameter);
        }
    
        public virtual ObjectResult<estadoH_Result> estadoH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<estadoH_Result>("estadoH");
        }
    }
}
